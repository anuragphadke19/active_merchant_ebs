= ActiveMerchantEbs

EBS integration for ActiveMerchant.

== Installation

=== Requirements

You need to install the ActiveMerchant gem or rails plugin. More info about ActiveMerchant installation can be found at http://www.activemerchant.org.

=== As a gem

Install the gem [recommended]:

  > gem install active_merchant_ebs  

To use the ActiveMerchantEbs gem in a Rails 3 application, add the following line in your Gemfile:

  gem 'active_merchant_ebs'

== Configuration

Create a merchant account with EBS.

Create a config file, like config/EBS.yml. Add the following lines:

  development: &defaults
    secret_key: <Enter your secret key without quotes>
    mode: TEST
    account_id: <Enter your account_id without quotes>
  
  staging:
    <<: *defaults

  test:
    <<: *defaults

  production:
    secret_key: <Enter your secret key without quotes>
    mode: LIVE
    account_id: <Enter your account_id without quotes>
  
Then add an intitializer, like initializer/ebs.rb, and add the following line

  EBS_CONFIG = YAML.load_file("#{Rails.root}/config/EBS.yml")[Rails.env]

This will load the ebs config file at the tie of initialization making it available throughout the app as EBS_CONFIG.

If ActiveMerchant's actionview helpers don't load automatically, add the line in your initializer:

  ActionView::Base.send :include, ActiveMerchant::Billing::Integrations::ActionViewHelper

== Example Usage

In your order submit view add this. @order is your Order model
  <% form_tag "https://secure.ebs.in/pg/ma/sale/pay/", :target => "EBS" ,:id=>"ebs_place_order" do -%>
    <%= hidden_field_tag 'account_id',      EBS_CONFIG['account_id'] %>
    <%= hidden_field_tag 'reference_no',    @order.id %>
    <%= hidden_field_tag 'amount',          @order.order_total.to_s %>
    <%= hidden_field_tag 'return_url',      [checkout_callback_url(@order),'DR={DR}'].join('?')  %>
    <%= hidden_field_tag 'name',            @order.billing_address.fullname %>
    <%= hidden_field_tag 'address',         @order.billing_address.address_line_1 %>
    <%= hidden_field_tag 'city',            @order.billing_address.city %>
    <%= hidden_field_tag 'postal_code',     @order.billing_address.pincode %>
    <%= hidden_field_tag 'country',         "IND" %>
    <%= hidden_field_tag 'description',     " Order: #{@order.id}" %>
    <%= hidden_field_tag 'email',          @order.email  %>
  
    <%= hidden_field_tag 'mode',            EBS_CONFIG['mode'] %>
    <%= hidden_field_tag 'phone',           @order.billing_address.phone_number %>
    <%= hidden_field_tag 'state',           @order.billing_address.state %>
  
    <%= hidden_field_tag 'ship_address',    @order.shipping_address.address_line_1 %>
    <%= hidden_field_tag 'ship_city',       @order.shipping_address.city %>
    <%= hidden_field_tag 'ship_country',    "IND" %>
    <%= hidden_field_tag 'ship_name',       @order.shipping_address.fullname %>
    <%= hidden_field_tag 'ship_phone',      @order.shipping_address.phone_number %>
    <%= hidden_field_tag 'ship_postal_code', @order.shipping_address.pincode %>
    <%= hidden_field_tag 'ship_state',      @order.shipping_address.state %>
    <%= submit_tag "Confirm Order" ,:class => "place_order_button"%>
  <% end %>

Your Order / Checkout controller should look something like this. The return_url path in the view should point to this method in your controller
  def callback
    @order   = Order.find(params[:id])
    session[:order_id] = params[:id]
    if params[:DR] &&
        (@data = ebsin_decode(params[:DR], EBS_CONFIG['secret_key'])) &&
        (@data["ResponseMessage"] == "Transaction Successful")
      session[:order_step] = session[:order_params] = nil
      @order.status = "payment_received"
      @order.save
      
      # Populate the payment details on successful transaction
      ebsin_payment_success(@data)
      # Empty the cart
      current_cart.line_items.destroy_all
      # Mail to buyer
      #OrderMailer.order_confirmation_buyer(@order).deliver
      OrderMailer.delay.order_confirmation_buyer(@order)
      # Mail to seller
      #OrderMailer.order_confirmation_seller(@order).deliver
      OrderMailer.delay.order_confirmation_seller(@order)
      session[:store_id] = @order.store_id
      redirect_to checkout_thank_you_path(:format => "fb")
    else
      @order.error_message = @data["ResponseMessage"]
      @order.status = "failed"
      @order.save
      session[:store_id] = @order.store_id
      redirect_to checkout_payment_fail_path(:format => "fb")
    end

    private
      # processing geteway returned data
      #
      def ebsin_decode(data, key)
        rc4 = RubyRc4.new(key)
        (Hash[ rc4.encrypt(Base64.decode64(data.gsub(/ /,'+'))).split('&').map { |x| x.split("=") } ]).slice(* NECESSARY )
      end

      def ebsin_payment_success(data)
        # record the payment
  
        payment_detail = PaymentDetail.create({    :gateway            => "EBS",
                                              :response_code      => data["ResponseCode"],
                                              :response_message   => data["ResponseMessage"],
                                              :order_id           => @order.id,
                                              :order_amount       => data["Amount"],
                                              :payment_id         => data["PaymentID"],
                                              :transaction_id     => data["TransactionID"] })
                                              
        payment_detail.save                                            
      end
   
  end
  def payment_fail
    @title = "Payment Failed"
    @order = Order.find(session[:order_id])
    session[:order_id] = nil
    respond_to do |format|
      format.fb # thank_you.fb.erb
      format.html # thank_you.html.erb
    end
  end

  def thank_you
    @title = "Thank You"
    @order = Order.find(session[:order_id])
    session[:order_id] = nil
    respond_to do |format|
      format.fb # thank_you.fb.erb
      format.html # thank_you.html.erb
    end
  end

== Special Thanks

This gem is heavily inspired by a similar integration done by Suman Debnath for CCavenue  @ https://github.com/meshbrain/active_merchant_ccavenue <br>
Very special thanks to him.  

== Copyright
See LICENSE for details.
